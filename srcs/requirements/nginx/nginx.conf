# This file is used to configure the core settings of Nginx, including server blocks (similar to virtual hosts in
# Apache), which control the handling of different websites hosted on the same server, as well as settings for
# performance, security, and how to process different types of requests.


# user under which Nginx server runs. important for security
# and permissions management
user  nginx;
# number of worker processes Nginx uses. with `auto` Nginx adjusts
# this number based on the available CPU cores, otpimizing performance.
worker_processes  auto;


# path to the error log file with logging level to `warn`, meaning
# that warning, erorrs, and critical messages will be logged
error_log  /var/log/nginx/error.log warn;
# file that will store the process ID of the main Nginx process
pid        /var/run/nginx.pid;


events { # configuration block for event-driven behavior
	# maximum number of simultaneous connections that each
	# worker process can handle
	worker_connections  1024; # default
}


http { # HTTP server configuration
	# file specifying MIME types, which helps Nginx set the
	# Content-Type header of response based on file extensions
	include       /etc/nginx/mime.types;
	# default MIME type for responses
	default_type  application/octet-stream; # binary data type, used when the type is unknown

	# format of the access log
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					  '$status $body_bytes_sent "$http_referer" '
					  '"$http_user_agent" "$http_x_forwarded_for"';
					  # client request information

	# option 1: path to the access log file
	access_log  /var/log/nginx/access.log  main; # previously (above) defined format
	# option 2: direct access log to standard output
	access_log /dev/stdout main;

	# enables use of `sendfile` system call to transfer files more efficiently
	sendfile        on;
	#tcp_nopush     on; # optimizes delivery of data packets

	# timeout for keep-alive connections with clients. after this period, connection is closed
	keepalive_timeout  65;

	#gzip  on; # gzip compression for responses, reducing data size and improving load times

	# additional configuration files from the specified directory, allowing for modular configuration:
	# each site hosted on the server can have its own configuration file
	include /etc/nginx/conf.d/*.conf;

	server { # configures server's behavior for specified domain or IP address
		# listening on port 443 (standard for HTTPS traffic) and enabling SSL/TLS connections
		listen 443 ssl;
		server_name mnegro.42.fr;
		
		# paths to SSL certificate and private key files (necessary for secure connection)
		# openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem
		ssl_certificate /etc/ssl/private/certificate.pem;
		ssl_certificate_key /etc/ssl/private/private.key;

		# TLS is an acronym for Transport Layer Security. It is cryptographic protocols designed to provide network
		# communications security. TLS is used by websites and other apps such as IM (instant messaging), email,
		# web browsers, VoIP, and more to secure all communications between their server and client.
		
		# enables only TLS versions 1.2 and 1.3
		ssl_protocols TLSv1.2 TLSv1.3;

		# recommended SSL settings for security
		# strong cipher suite for securing SSL connections
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
		# preference to server's cipher suite order over the client's
		ssl_prefer_server_ciphers on;
		# configure SSL session caching for performance improvement
		ssl_session_cache shared:SSL:10m; # up to 10 megabytes of memory used for storing session parameters (can speed up subsequent connections from the same client)
		ssl_session_timeout 10m; # time during which a client may reuse the session parameters for reconnecting
	}
}
